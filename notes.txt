String - class 

String :- collections of character 
		they also use character array internally 
		
char[30] //max 30 chars  ==> c c++ 

String => immutable 



int x = 12 
String name = "royal";//String 
String gender  = "m" //String  

	or 
	
String name = new String("royal"); 

how we can scan from the user? 
Scanner 

Scanner scr = new Scanner(System.in);

System.out.println("enter your name");
String name = scr.next(); // next() => scan string from console [ will not accept space ] 


System.out.println("enter your full name");
String fullName = scr.nextLine(); // nextLine() => scan string from console also accept space  



char x = scr.next().charAt(0); 

---------------------

StringBuffer StringBuilder ==> muttable 

StringBuffer  => synchronized  | turn by turn 
1 30MIN
2 30MIN
3 30MIN
4 30MIN
--------
120MIN 


Sync
50k --> icici bank net banking --> icici saving 5:   5.1   
22k --> K  --> amazon -----------> icici saving 5:   5.10
5k ---> P  --> justcry ----------> icici saving 5:   5.15  




StringBuilder  => non-synchronized | all at once 
1 30MIN
2 30MIN
3 30MIN
4 30MIN
--------
30MIN 

-------------------------------------------------------------------------------------
inheritance:- by which object of one class can access property of another class 
	class A
		add 
	class B
		sub 
		
	B obj; 
	obj.sub 
	obj.add 

we need to use extends keyword to achieve inheritance. 

OOP
1.	single level
2.	multi level
3.	multiple
4.	hybrid
5.	hierarchical 

oop=> encapsulate => class 


primitive data types*

int 
char 
float
boolean

x = 10 // x instace int class 

to access the property of parent class-> child can use __super____ keyword. 

we can use super keyword inside the only child class. 
can i use super keyword in main method?? no 
oop--> method overriding 
		if child create a method having exactly same signature with parent. 

  --> method overloading 
  		1) when a single class create method with same name and unique argument then it's known as overloading , 
  		   overloading can be possible in inheritance also 
  		   
  		   
  overloading can be possible in single class or we can achieve using more than one class 
  overriding required inheritance so we must need at-least 2 class -- parent child 
  

-------------------------------------------------------------------------------------
oop -> c++ , python 
100% =  [ contains all the features of oop ] --java [ primitives,...,...,..., ] 
pure =  [ contains only all the features of oop ] 
-------------------------------------------------------------------------------------
oop --> specification
java --> implementation {class , interface } 
c++ --> implementation  { class } 
------------------------------------------------------------------------------------- 
twitter ->Ruby --> |RoR| -->  inter. --> slow 
	    ->java --> |.class|  0% performance change 	
-------------------------------------------------------------------------------------
pHp-> easy --> fast-->cheap 
html -> js --> 
-------------------------------------------------------------------------------------
fre --> 18k 
exp --> 50k
-------------------------------------------------------------------------------------
constructor :- its a special method which has same name as class name ,
			   it is used to initialize the instance variable. 
			   it does not have any return type.
			   We don't need to call it , it will call automatically when we create an instance. 
			   
implicit constructor
	default constructor 
explicit constructor 
    default constructor  [ no arg ] 
    paramaterized constructor [ argument ] 
-------------------------------------------------------------------------------------






//single data name --> can store multiple values;
//array --> collection of same type of data; 
//      --> its a static memory allocation , so we need to allocate size before use 
//			once we allocate memory we can not resize it. --> insert -> grow --> delete -> shrink 
//			arrya is non primitive data type 
//			ragged array -- array of array  


1D array 

array elements can be access using index 
index starts with 0 and ends with  size-1 [size - array total capacity ] 

int a[] = new int[5]

_____subscript_______ is an alternative name of index? 


-------------------------------------------------------------------------------------

folder --> package -> it is java's sepratation for classes. 

lang
	Math
	String 
	System
util 
	Scanner
	Date
	Calendar
io
	File 
	FileWriter
	FileReader 
sql

applet 


	
....
....
....


movies 
	hollywood
			hindi
			eng  
	bollywood
			bagban 		
	tolly



two types :-
	built-in packages [ lang, io , util , applet , ...]
	user-define packages [XXX] 
------------------------------------------------------

access specifier--> 

								
	abc				def			
	A	A::add()	private		D			
	B 	A::mul()	default		E extends A			
	C extends A	A::div()	protected					
		A::sub()	public					
								
					                                 private	default	protected	public
	object of A class from A 		same class	      A	Y	Y	Y	Y
	object of A class From B 		same package non subclass	B	N	Y	Y	Y
	object of C class From C 		same package sub class	C	N	Y	Y	Y
	object of A class From D 		diff pack non sub	D	N	N	N	Y
	object of E class From E 		diff pack sub	E	N	N	Y	Y
	

-------------------------------------------------------------
non-access-modifiers 

	static
	final
	abstract 
	synchronized
	transient 
	volatile 
	native 
	
	
------------------------------------------------------
static:- 


//class  ->  ---- 
//method -> static  
//variable -> static 

class A {

	int k; // instance variable
	static int y = 10;// static/class variable

	// if we create 10 instance of class A then k will be created 10 times in the
	// memory
	// for the same , y will be only once in the memory.

	// instance variable can be access using instance/object only
	// static variable can be access using instance/object or class name

	// When to use static variable?
	// when we have common properties for all instance static is best
	// Bank ->
	// balance
	// branchCode*
	// bankCode*

	// non static -> instance call
	// static -> class call

	
	// When to use static method?
	// when we want to call method without instance
	// common logic -> utility class { Math -> sin() sqrt() } Math.random()
	// Math.sqrt()
	// covax --> input --> name , aadhar , year --> validation [ a-zA-Z , digit+8 ,
	// ]

	//static method can be call using instance/class name 
	
	void add() {
		System.out.println("non static -> A::add()");
		System.out.println("k => "+k); // non static method -> non static variable ? yes 
		System.out.println("Y => "+y); // non static method -> static variable ? yes 
	}

	static void sub() {
		System.out.println("static -> A::sub()");
//		System.out.println("k => "+k); // static method -> non static variable ? no 
		System.out.println("Y => "+y); // static method -> static variable ? yes 
	
	}

}

-----------------------------------------------------------

final:-

class:- Yes
method:- Yes 
variable:- Yes [ instance , local ] 





-----------------------------------------------------------













