String - class 

String :- collections of character 
		they also use character array internally 
		
char[30] //max 30 chars  ==> c c++ 

String => immutable 



int x = 12 
String name = "royal";//String 
String gender  = "m" //String  

	or 
	
String name = new String("royal"); 

how we can scan from the user? 
Scanner 

Scanner scr = new Scanner(System.in);

System.out.println("enter your name");
String name = scr.next(); // next() => scan string from console [ will not accept space ] 


System.out.println("enter your full name");
String fullName = scr.nextLine(); // nextLine() => scan string from console also accept space  



char x = scr.next().charAt(0); 

---------------------

StringBuffer StringBuilder ==> muttable 

StringBuffer  => synchronized  | turn by turn 
1 30MIN
2 30MIN
3 30MIN
4 30MIN
--------
120MIN 


Sync
50k --> icici bank net banking --> icici saving 5:   5.1   
22k --> K  --> amazon -----------> icici saving 5:   5.10
5k ---> P  --> justcry ----------> icici saving 5:   5.15  




StringBuilder  => non-synchronized | all at once 
1 30MIN
2 30MIN
3 30MIN
4 30MIN
--------
30MIN 

-------------------------------------------------------------------------------------
inheritance:- by which object of one class can access property of another class 
	class A
		add 
	class B
		sub 
		
	B obj; 
	obj.sub 
	obj.add 

we need to use extends keyword to achieve inheritance. 

OOP
1.	single level
2.	multi level
3.	multiple
4.	hybrid
5.	hierarchical 

oop=> encapsulate => class 
	
	

primitive data types*

int 
char 
float
boolean

x = 10 // x instace int class 

to access the property of parent class-> child can use __super____ keyword. 

we can use super keyword inside the only child class. 
can i use super keyword in main method?? no 
oop--> method overriding 
		if child create a method having exactly same signature with parent. 

  --> method overloading 
  		1) when a single class create method with same name and unique argument then it's known as overloading , 
  		   overloading can be possible in inheritance also 
  		   
  		   
  overloading can be possible in single class or we can achieve using more than one class 
  overriding required inheritance so we must need at-least 2 class -- parent child 
  

-------------------------------------------------------------------------------------
oop -> c++ , python 
100% =  [ contains all the features of oop ] --java [ primitives,...,...,..., ] 
pure =  [ contains only all the features of oop ] 
-------------------------------------------------------------------------------------
oop --> specification
java --> implementation {class , interface } 
c++ --> implementation  { class } 
------------------------------------------------------------------------------------- 
twitter ->Ruby --> |RoR| -->  inter. --> slow 
	    ->java --> |.class|  0% performance change 	
-------------------------------------------------------------------------------------
pHp-> easy --> fast-->cheap 
html -> js --> 
-------------------------------------------------------------------------------------
fre --> 18k 
exp --> 50k
-------------------------------------------------------------------------------------
constructor :- its a special method which has same name as class name ,
			   it is used to initialize the instance variable. 
			   it does not have any return type.
			   We don't need to call it , it will call automatically when we create an instance. 
			   
implicit constructor
	default constructor 
explicit constructor 
    default constructor  [ no arg ] 
    paramaterized constructor [ argument ] 
-------------------------------------------------------------------------------------






//single data name --> can store multiple values;
//array --> collection of same type of data; 
//      --> its a static memory allocation , so we need to allocate size before use 
//			once we allocate memory we can not resize it. --> insert -> grow --> delete -> shrink 
//			arrya is non primitive data type 
//			ragged array -- array of array  


1D array 

array elements can be access using index 
index starts with 0 and ends with  size-1 [size - array total capacity ] 

int a[] = new int[5]

_____subscript_______ is an alternative name of index? 


-------------------------------------------------------------------------------------

folder --> package -> it is java's sepratation for classes. 

lang
	Math
	String 
	System
util 
	Scanner
	Date
	Calendar
io
	File 
	FileWriter
	FileReader 
sql

applet 


	
....
....
....


movies 
	hollywood
			hindi
			eng  
	bollywood
			bagban 		
	tolly



two types :-
	built-in packages [ lang, io , util , applet , ...]
	user-define packages [XXX] 
------------------------------------------------------

access specifier--> 

								
	abc				def			
	A	A::add()	private		D			
	B 	A::mul()	default		E extends A			
	C extends A	A::div()	protected					
		A::sub()	public					
								
					                                 private	default	protected	public
	object of A class from A 		same class	      A	Y	Y	Y	Y
	object of A class From B 		same package non subclass	B	N	Y	Y	Y
	object of C class From C 		same package sub class	C	N	Y	Y	Y
	object of A class From D 		diff pack non sub	D	N	N	N	Y
	object of E class From E 		diff pack sub	E	N	N	Y	Y
	

-------------------------------------------------------------
non-access-modifiers 

	static
	final
	abstract 
	synchronized
	transient 
	volatile 
	native 
	
	
------------------------------------------------------
static:- 


//class  ->  ---- 
//method -> static  
//variable -> static 

class A {

	int k; // instance variable
	static int y = 10;// static/class variable

	// if we create 10 instance of class A then k will be created 10 times in the
	// memory
	// for the same , y will be only once in the memory.

	// instance variable can be access using instance/object only
	// static variable can be access using instance/object or class name

	// When to use static variable?
	// when we have common properties for all instance static is best
	// Bank ->
	// balance
	// branchCode*
	// bankCode*

	// non static -> instance call
	// static -> class call

	
	// When to use static method?
	// when we want to call method without instance
	// common logic -> utility class { Math -> sin() sqrt() } Math.random()
	// Math.sqrt()
	// covax --> input --> name , aadhar , year --> validation [ a-zA-Z , digit+8 ,
	// ]

	//static method can be call using instance/class name 
	
	void add() {
		System.out.println("non static -> A::add()");
		System.out.println("k => "+k); // non static method -> non static variable ? yes 
		System.out.println("Y => "+y); // non static method -> static variable ? yes 
	}

	static void sub() {
		System.out.println("static -> A::sub()");
//		System.out.println("k => "+k); // static method -> non static variable ? no 
		System.out.println("Y => "+y); // static method -> static variable ? yes 
	
	}

}

-----------------------------------------------------------

final:-

class:- Yes
method:- Yes 
variable:- Yes [ instance , local ] 

---------------------------------------------------------------------------------------
abstract :- 
	hide 
	
class:- yes
method:- yes
variable:- NA 

if you have abstract method in your class , then your class must be an abstract.
abstract class can contains both methods abstract and non-abstract.
you can not create instance of abstract class. 
you have to create concrete sub class [ non abstract child class ] and override all abstract methods.
 

---------------------------------------------------------------------------------------
strictfp :- 
	class  - yes 
	method - yes 
	variable - no
---------------------------------------------------------------------------------------

volatile*
transient* 
---------------------------------------------------------------------------------------
interface :- is a pure abstract class.
			 so all the methods in interface are implicitly abstract.
			 you can create interface using interface keyword. 
			 
			 interface RBI{
			 
			 }
			 
			 achieve multiple inheritance* 
			 contract  

			class has to "implements" interface
			
			all methods in interface are also public 
			
			method -> abstract ,public 
			variable -> final , public , static 
			
			
			you can implements more than 1 interface with 1 class

			can we have constructor in interface? 
			can we create instance of interface? 
			A.java ==> class A, class B,class C ==> compile -> .class??? 3 A.class B.class C.class 
			

			if i have 1 interface A and 1 class C in my C.java file then how many class will create when we compile C.java??
			C.java => class C , interface A => compile --> .class ? C.class , A.class  

---------------------------------------------------------------------------------------

exception :- run time error 

error :-	1)	compile time error - syntax , ; , variable declare | assign  [ compiler ]  
			2)  runtime error  , logic , 
			
			division -> 10,2 => 10/2 => 5 
			division ->   10 , 0 => 10/0 => runtime error -> exception 


exception handling --> 
			
			try -- code --> exception 
			hit ---> jre --> X 
			throw				--> throw --> crash 
			catch   --> X --> handle 
				
	exception class ---> Exception 
	
	
	try 
	catch 
	finally 
	throws 
	throw [ custom | manual throw exception ] [ raise* ] 
	
	
				Throwable 
	
	Exception 					Error {X} --> class - main ->  
	
		
	ArithmeticException
	InputmissmatchException  
	NullPointerException
	StringIndexOutofBoundsException
	ArrayIndexOutofBoundsException
	
	
	
				Exception  
		IOException			RuntimeException
								ArithmeticException
								InputmissmatchException  
								NullPointerException
								StringIndexOutofBoundsException
								ArrayIndexOutofBoundsException
							
			
	

---------------------------------------------------------------------------------------

how many types of error we have in java? 
2

____Exception______ is parent of all exception class? 



______ and __________ keywords are used to handle exception?
try...catch 


__________ block is used to handle garbage cleaning. 
finally 


_______ is parent of Exception class ? 
Throwable 

_______ is parent of Throwable class? 
Object 

-------------------------------------------------------------------------------



custom exception --- 

		google api -->   website --> signup --> login
				website --> login with google 
				
		tejas
		tejas@gmail 
		tejas@ymail.com
		tejas@gmail.in
		
		tejas@gmail.com 
		
		google will throw an exception --> 
		
		
		payment --->
			website--> 15000 --> |payment gateway| sbi card --->
							XXXXX2123 
							cvv 
							expDate
							otp
				cvv - 1200
				expDate  - 3200
				expired - 2300 
				otp - 6300 
				cardnumber - 9090
				credit limit - 6520 
				balance - 2563 
				
		
			ORA-90001 : foreign key....
				
				
-------------------------------------------------------------------------------
			
				Exception  
		IOException			RuntimeException
								ArithmeticException
								InputmissmatchException  
								NullPointerException
								StringIndexOutofBoundsException
								ArrayIndexOutofBoundsException
											
All exception class are belongs to either checked exception or unchecked exception 
			
1) checked -- Exception 
2) unchecked -- RuntimeException 

				
-------------------------------------------------------------------------------
			
class -> resource --> release --> close() 

Closeable --> 

try{

}catch(NullpointerException | ArithmeticException e){

}			
			
-------------------------------------------------------------------------------

commandLine :-

	take any numbers from user using command line and perform addition of all numbers. 
	
	e.g
	
	
	java Sum 1 2 3 
	ans = 6
	
	java Sum 1 2 3 4 5 
	ans = 15 
	
	java Sum 10 20 
	ans = 30 
	

-------------------------------------------------------------------------------
enum :- 

		JB app ->
			final static int dabeliPrice=30; 
			final static int pizzaPrice=34; 
			
			class 
		1)	enum -- outside class 
		2)	enum -- inside class 
			
-------------------------------------------------------------------------------
polymorphism :- 

		compile time					
			method overloading ,
				method -> 1+ -> same name ->argu diff | return 
			operator overloading* [ + operator ] 
			 
		runtime 
			overriding 
				parent-child -->method -->same signature 
			virtual function*	
				
	
dynamic method dispatch
dynamic method loading 
runtime polymorphism 
		
polymorphic object --> 
	compile time --> parent 
		runtime --> child 
		

			
-------------------------------------------------------------------------------
encapsulation :-	

			instance variable --> protected  or private
			method ---> public 
				getters 
				setters 
				 
-------------------------------------------------------------------------------
			
what is the difference between & and && operator ?
		
		
if(a > b && a++ > b++){
	System.out.println("inside if");
}	
	
 System.out.println(a);
 System.out.println(b);
	
	
		
if(a > b & a++ > b++){
	System.out.println("inside if");
}	
	
 System.out.println(a);
 System.out.println(b);
			
		
instance of -----> 


blocks ->
	static - will call once - in the beg. - static block will call first from all blocks  
	instance - will call everytime when you create instance/object - brefore the constructor 
	can we have more than 1 static block?  yes
	can we have more than 1 instance block (IIB ) ? yes 
	calling ?
	if we have multiple static/instnace block then execution will takes 
	first come first serve -- top down approach. 
	
	if you want to perform initilization task - 
		a = 90 X  --* [constructor ] 
		a = [ some logic ] // pre processing 
		
	Product {
		price = [ db => USD | INR ] 
	}
	
	
	
		
		
				
-------------------------------------------------------------------------------
local variable use ____stack_____ to store their values?
instance variables are stored in ____heap________ ? 
static variables are stored in _____heap_______ ? 

void add(){
	int k;
}
Bank b = new Bank(); 
class Bank{
	b =null; 
}
--> gc -->
	
---------------------------------------------------------------------------------------------------------
collections --> when we have multiple data items to deal with....
 
	1)collection - topic  
	2)Collection - interface 
	3)Collections - class 
	
	
flipkart --> led tv --> search --> request --> server ---> ledtv ---> db --> [10,000]-->server-->you 
sort by ratings 
sort by price -> h - l  , l - h 	
	led tv 55" mi --> 55000 56000 
	
	1) dynamic 
	2) sort 
	3) unique 
	-------
	
								Collection
		List			Queue			Set 						Map*
c->		ArrayList	PriorityQueue		HashSet					HashMap
		Vector				 			TreeSet					TreeMap 
		
		
		Collections 
		Arrays 
		Comparable 
		Comparator 
		
--------------------------------------------------------------------------------------------------------	
	
	ArrayList -- array | dynamic - no data type limit   
	--- unsorted , ordered  , allow duplicates 
	--- you can access data using index 
	
	Vector --- all methods are same 
		 
	
--------------------------------------------------------------------------------------------------------	
	use multiple users in bank app. 
	also add 1 more feature --- transfer amount from one account to another , make sure 
	user will not enter invalid account number. if user input invalid account number then
	charge 500rs per invalid input. 
--------------------------------------------------------------------------------------------------------	
	priority queue --> unorder , unsorted , allow duplicates 
--------------------------------------------------------------------------------------------------------	
	HashSet -> unsorted 
	TreeSet -> sorted 
	Set => no duplicate 
--------------------------------------------------------------------------------------------------------	
how arraylist works in memory?
--------------------------------------------------------------------------------------------------------

KJ => 
 	KJ has variety of products to sell. 
 	they are specialized in making gold bangles.
 	they are also selling ear-rings. 
 	your task to design an application that can manage their inventory. 
 	you need to store details of every product , 
 		like ,productId, name , qty , price , and type of build - type of build can be any [ gold,silver,diamond,mix] 

 
	design menu for , addition and listing and search products for app. 
	
	
	search -> price -> budget -> 25000 [ products ] 
	search by buildType ->  gold | silver | 
	
	buy -> 
		enter productId ?
		123
		Qty 
		1
		
		123 -> product -> qty -> 1 minus 
				
 
	
--------------------------------------------------------------------------------------------------------	

									Collection

									  Set [ no duplicates ] 
					HashSet											TreeSet 
					[unordered]										[sorted] 





--------------------------------------------------------------------------------------------------------	








	
				 
								



































